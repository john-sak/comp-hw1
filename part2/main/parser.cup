/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            PLUS, REVERSE, PREFIX, LPAREN, RPAREN, LCURLPAREN, RCURLPAREN, COMMA, IF, ELSE;
terminal String     ID, STRING_LIT;

/*  Non terminals */
non terminal String     program, dclr_list, dclr, param_list, param, expr, conc_expr, str, rev_expr, if_expr, bool_expr, pref_expr, stmnt_list, stmnt, func_call, arg_list, arg;

/**
 *  Precedence Declarations
 */

/**
 *  The Grammar Rules
 */
program     ::= dclr_list stmnt_list        {::}
            ;
dclr_list   ::= dclr_list dclr              {::}
            |   dclr                        {::}
            |                               {::}
            ;
dclr        ::= ID LPAREN param_list RPAREN LCURLPAREN expr RCURLPAREN      {::}
            ;
param_list  ::= param_list COMMA param      {::}
            |   param                       {::}
            ;
param       ::= ID                          {::}
            |                               {::}
            ;
expr        ::= conc_expr                   {::}
            |   rev_expr                    {::}
            |   if_expr                     {::}
            |   ID                          {::}
            |   STRING_LIT                  {::}
            ;
conc_expr   ::= str PLUS str                {::}
            ;
str         ::= STRING_LIT                  {::}
            |   ID                          {::}
            ;
rev_expr    ::= REVERSE str                 {::}
            ;
if_expr     ::= IF LPAREN bool_expr RPAREN expr ELSE expr       {::}
            ;
bool_expr   ::= pref_expr                   {::}
            ;
pref_expr   ::= str PREFIX str              {::}
            ;
stmnt_list  ::= stmnt_list stmnt_list       {::}
            |   stmnt                       {::}
            ;
stmnt       ::= func_call                   {::}
            ;
func_call   ::= ID:idnt LPAREN arg_list:args RPAREN {: RESULT = String.format("%s(%s)", idnt, args); :}
            ;
arg_list    ::= arg_list:a_rest COMMA arg:a {: RESULT = String.format("%s, %s", a_rest, a); :}
            |   arg:a                       {: RESULT = String.format("%s", a); :}
            ;
arg         ::= func_call:func              {: RESULT = String.format("%s", func); :}
            |   STRING_LIT:s                {: RESULT = String.format("\"%s\"", s); :}
            |                               {: RESULT = ""; :}
            ;