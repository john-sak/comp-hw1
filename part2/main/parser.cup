/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s) {
        this.s=s;
    }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            PLUS, REVERSE, PREFIX, LPAREN, RPAREN, LCURLPAREN, RCURLPAREN, COMMA, IF, ELSE;
terminal String     ID, STRING_LIT;

/*  Non terminals */
non terminal        dclr_list, dclr, param_list, param, expr, conc_expr, str, rev_expr, if_expr, bool_expr, pref_expr, stmnt_list, stmnt, func_call, arg_list, arg;
non terminal String program;

/**
 *  Precedence Declarations
 */

precedence nonassoc STRING_LIT;
precedence nonassoc ID;
precedence nonassoc LPAREN, RPAREN;
precedence nonassoc LCURLPAREN, RCURLPAREN;
precedence nonassoc PREFIX;
precedence nonassoc IF, ELSE;
precedence left PLUS;
precedence nonassoc REVERSE;

/**
 *  The Grammar Rules
 */
program     ::= dclr_list:d_list stmnt_list:s_list  {:
                                                    System.out.println("public class Main {");
                                                    System.out.println("\tpublic static void main(String[] args) {");
                                                    System.out.printf("%s", s_list);
                                                    System.out.println("\t}");
                                                    System.out.printf("%s", d_list);
                                                    System.out.println("}");
                                                    :}
            ;
dclr_list   ::= dclr:d dclr_list:d_rest     {: RESULT = String.format("%s\n%s", d_rest, d); :}
            |                               {: RESULT = ""; :}
            ;
dclr        ::= ID:idnt LPAREN param_list:p RPAREN LCURLPAREN expr:e RCURLPAREN {: RESULT = String.format("\tpublic static String %s(%s) {\n\t\treturn %s;\n\t}\n", idnt, p, e); :}
            ;
param_list  ::= param:p COMMA param_list:p_rest {: RESULT = String.format("%s, %s", p_rest, p); :}
            |   param:par                   {: RESULT = String.format("%s", par); :}
            |                               {: RESULT = ""; :}
            ;
param       ::= ID:idnt                     {: RESULT = String.format("%s", idnt); :}
            ;
expr        ::= conc_expr:e                 {: RESULT = String.format("%s", e); :}
            |   rev_expr:e                  {: RESULT = String.format("%s", e); :}
            |   if_expr:e                   {: RESULT = String.format("%s", e); :}
            |   ID:idnt                     {: RESULT = String.format("%s", idnt); :}
            |   STRING_LIT:s                {: RESULT = String.format("\"%s\"", s); :}
            ;
conc_expr   ::= str:s1 PLUS str:s2          {: RESULT = String.format("(%s + %s)", s1, s2); :}
            ;
str         ::= STRING_LIT:s                {: RESULT = String.format("\"%s\"", s); :}
            |   ID:idnt                     {: RESULT = String.format("%s", idnt); :}
            ;
rev_expr    ::= REVERSE str:s               {: RESULT = String.format("(new StringBuilder(%s).reverse().toString())", s); :}
            ;
if_expr     ::= IF LPAREN bool_expr:bool_e RPAREN expr:e1 ELSE expr:e2  {: RESULT = String.format("(%s ? %s : %s)", bool_e, e1, e2); :}
            ;
bool_expr   ::= pref_expr:e                 {: RESULT = String.format("%s", e); :}
            ;
pref_expr   ::= str:s1 PREFIX str:s2        {: RESULT = String.format("(%s.startsWith(%s))", s2, s1); :}
            ;
stmnt_list  ::= stmnt:s stmnt_list:s_rest   {: RESULT = String.format("%s\t\tSystem.out.println(%s);\n", s_rest, s); :}
            |                               {: RESULT = ""; :}
            ;
stmnt       ::= func_call:f                 {: RESULT = String.format("%s", f); :}
            ;
func_call   ::= ID:idnt LPAREN arg_list:args RPAREN {: RESULT = String.format("%s(%s)", idnt, args); :}
            ;
arg_list    ::= arg:a COMMA arg_list:a_rest {: RESULT = String.format("%s, %s", a_rest, a); :}
            |   arg:a                       {: RESULT = String.format("%s", a); :}
            |                               {: RESULT = ""; :}
            ;
arg         ::= func_call:func              {: RESULT = String.format("%s", func); :}
            |   STRING_LIT:s                {: RESULT = String.format("\"%s\"", s); :}
            ;